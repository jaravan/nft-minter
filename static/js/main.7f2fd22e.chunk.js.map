{"version":3,"sources":["Minter.js","App.js","reportWebVitals.js","index.js"],"names":["Minter","props","_useState","useState","_useState2","_slicedToArray","walletAddress","_useState3","_useState4","status","_useState5","_useState6","setName","_useState7","_useState8","setDescription","_useState9","_useState10","setURL","useEffect","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","stop","connectWalletPressed","_ref2","_callee2","_context2","apply","arguments","onMintPressed","_ref3","_callee3","_context3","_jsxs","className","children","_jsx","id","onClick","length","String","substring","type","placeholder","onChange","event","target","value","App","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"8OAuEeA,EArEA,SAACC,GAGd,IAAAC,EAAmCC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAAxCI,EAAaF,EAAA,GACpBG,GAD+BH,EAAA,GACHD,mBAAS,KAAGK,EAAAH,YAAAE,EAAA,GAAjCE,EAAMD,EAAA,GACbE,GADwBF,EAAA,GACAL,mBAAS,KAAGQ,EAAAN,YAAAK,EAAA,GAAvBE,GAAFD,EAAA,GAASA,EAAA,IACpBE,EAAsCV,mBAAS,IAAGW,EAAAT,YAAAQ,EAAA,GAA9BE,GAAFD,EAAA,GAAgBA,EAAA,IAClCE,EAAsBb,mBAAS,IAAGc,EAAAZ,YAAAW,EAAA,GAAtBE,GAAFD,EAAA,GAAQA,EAAA,IAElBE,oBAASC,YAAAC,cAAAC,MAAC,SAAAC,IAAA,OAAAF,cAAAG,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,wBAAAF,EAAAG,OAAA,GAAAL,EAAA,KAEP,IAEH,IAAMM,EAAoB,eAAAC,EAAAV,YAAAC,cAAAC,MAAG,SAAAS,IAAA,OAAAV,cAAAG,MAAA,SAAAQ,GAAA,cAAAA,EAAAN,KAAAM,EAAAL,MAAA,wBAAAK,EAAAJ,OAAA,GAAAG,EAAA,KAE5B,kBAFyB,OAAAD,EAAAG,MAAA,KAAAC,UAAA,KAIpBC,EAAa,eAAAC,EAAAhB,YAAAC,cAAAC,MAAG,SAAAe,IAAA,OAAAhB,cAAAG,MAAA,SAAAc,GAAA,cAAAA,EAAAZ,KAAAY,EAAAX,MAAA,wBAAAW,EAAAV,OAAA,GAAAS,EAAA,KAErB,kBAFkB,OAAAD,EAAAH,MAAA,KAAAC,UAAA,KAInB,OACEK,eAAA,OAAKC,UAAU,SAAQC,SAAA,CACrBC,cAAA,UAAQC,GAAG,eAAeC,QAASf,EAAqBY,SACrDnC,EAAcuC,OAAS,EACtB,cACAC,OAAOxC,GAAeyC,UAAU,EAAG,GACnC,MACAD,OAAOxC,GAAeyC,UAAU,IAEhCL,cAAA,QAAAD,SAAM,qBAIVC,cAAA,SACAA,cAAA,MAAIC,GAAG,QAAOF,SAAC,mDACfC,cAAA,KAAAD,SAAG,6EAGHF,eAAA,QAAAE,SAAA,CACEC,cAAA,MAAAD,SAAI,iCACJC,cAAA,SACEM,KAAK,OACLC,YAAY,gDACZC,SAAU,SAACC,GAAK,OAAKjC,EAAOiC,EAAMC,OAAOC,MAAM,IAEjDX,cAAA,MAAAD,SAAI,wBACJC,cAAA,SACEM,KAAK,OACLC,YAAY,uBACZC,SAAU,SAACC,GAAK,OAAKvC,EAAQuC,EAAMC,OAAOC,MAAM,IAElDX,cAAA,MAAAD,SAAI,+BACJC,cAAA,SACEM,KAAK,OACLC,YAAY,yCACZC,SAAU,SAACC,GAAK,OAAKpC,EAAeoC,EAAMC,OAAOC,MAAM,OAG3DX,cAAA,UAAQC,GAAG,aAAaC,QAAST,EAAcM,SAAC,aAGhDC,cAAA,KAAGC,GAAG,SAAQF,SACXhC,MAIT,EC1De6C,MARf,WACE,OACEZ,cAAA,OAAKF,UAAU,MAAKC,SAClBC,cAAC1C,EAAM,KAGb,ECGeuD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,SAAAC,GAAkD,IAA/CC,EAAMD,EAANC,OAAQC,EAAMF,EAANE,OAAQC,EAAMH,EAANG,OAAQC,EAAMJ,EAANI,OAAQC,EAAOL,EAAPK,QAC3DJ,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,EACV,GAEJ,ECJAS,IAASC,OACPxB,cAACyB,IAAMC,WAAU,CAAA3B,SACfC,cAACY,EAAG,MAENe,SAASC,eAAe,SAM1Bf,G","file":"static/js/main.7f2fd22e.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\n\nconst Minter = (props) => {\n\n  //State variables\n  const [walletAddress, setWallet] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [url, setURL] = useState(\"\");\n \n  useEffect(async () => { //TODO: implement\n    \n  }, []);\n\n  const connectWalletPressed = async () => { //TODO: implement\n   \n  };\n\n  const onMintPressed = async () => { //TODO: implement\n    \n  };\n\n  return (\n    <div className=\"Minter\">\n      <button id=\"walletButton\" onClick={connectWalletPressed}>\n        {walletAddress.length > 0 ? (\n          \"Connected: \" +\n          String(walletAddress).substring(0, 6) +\n          \"...\" +\n          String(walletAddress).substring(38)\n        ) : (\n          <span>Connect Wallet</span>\n        )}\n      </button>\n\n      <br></br>\n      <h1 id=\"title\">üßô‚Äç‚ôÇÔ∏è John NFT Minter</h1>\n      <p>\n        Simply add your asset's link, name, and description, then press \"Mint.\"\n      </p>\n      <form>\n        <h2>üñº Link to asset: </h2>\n        <input\n          type=\"text\"\n          placeholder=\"e.g. https://gateway.pinata.cloud/ipfs/<hash>\"\n          onChange={(event) => setURL(event.target.value)}\n        />\n        <h2>ü§î Name: </h2>\n        <input\n          type=\"text\"\n          placeholder=\"e.g. My first NFT!!!\"\n          onChange={(event) => setName(event.target.value)}\n        />\n        <h2>‚úçÔ∏è Description: </h2>\n        <input\n          type=\"text\"\n          placeholder=\"e.g. Even cooler than cryptokitties ;)\"\n          onChange={(event) => setDescription(event.target.value)}\n        />\n      </form>\n      <button id=\"mintButton\" onClick={onMintPressed}>\n        Mint NFT\n      </button>\n      <p id=\"status\">\n        {status}\n      </p>\n    </div>\n  );\n};\n\nexport default Minter;\n","import './App.css';\nimport Minter from './Minter'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Minter></Minter>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}