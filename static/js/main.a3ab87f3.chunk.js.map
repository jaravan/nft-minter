{"version":3,"sources":["utils/pinata.js","utils/interact.js","Minter.js","App.js","reportWebVitals.js","index.js"],"names":["require","config","axios","pinJSONToIPFS","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","JSONBody","wrap","_context","prev","next","abrupt","post","headers","pinata_api_key","process","pinata_secret_api_key","then","response","success","pinataUrl","data","IpfsHash","catch","error","console","log","message","stop","_x","apply","arguments","web3","createAlchemyWeb3","contractABI","contractAddress","connectWallet","addressArray","obj","window","ethereum","request","method","sent","status","address","t0","_jsx","children","_jsxs","target","href","mintNFT","_ref2","_callee2","url","name","description","metadata","pinataResponse","tokenURI","transactionParameters","txHash","_context2","trim","Object","image","eth","Contract","contract","to","from","selectedAddress","methods","encodeABI","params","_x2","_x3","getCurrentWalletConnected","_ref3","_callee3","_context3","length","Minter","props","_useState","useState","_useState2","_slicedToArray","walletAddress","setWallet","_useState3","_useState4","setStatus","_useState5","_useState6","setName","_useState7","_useState8","setDescription","_useState9","_useState10","setURL","useEffect","_yield$getCurrentWall","addWalletListener","connectWalletPressed","walletResponse","on","accounts","onMintPressed","_yield$mintNFT","className","id","onClick","String","substring","type","placeholder","onChange","event","value","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a3ab87f3.chunk.js","sourcesContent":["require('dotenv').config();\nconst key = process.env.REACT_APP_PINATA_KEY;\nconst secret = process.env.REACT_APP_PINATA_SECRET;\n\nconst axios = require('axios'); // npm library to do http call\n\nexport const pinJSONToIPFS = async(JSONBody) => {\n    const url = `https://api.pinata.cloud/pinning/pinJSONToIPFS`;\n    //making axios POST request to Pinata ⬇️\n    return axios \n        .post(url, JSONBody, {\n            headers: {\n                pinata_api_key: key,\n                pinata_secret_api_key: secret,\n            }\n        })\n        .then(function (response) {\n           return {\n               success: true,\n               pinataUrl: \"https://gateway.pinata.cloud/ipfs/\" + response.data.IpfsHash\n           };\n        })\n        .catch(function (error) {\n            console.log(error)\n            return {\n                success: false,\n                message: error.message,\n            }\n\n    });\n};","import {pinJSONToIPFS} from './pinata.js'\nrequire('dotenv').config();\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\nconst web3 = createAlchemyWeb3(alchemyKey);\n\nconst contractABI = require('../contract-abi.json')\nconst contractAddress = \"0x454d8B7c327AEFF31f117eb94a066459e3bef0Ef\";\n\n// connectWallet\nexport const connectWallet = async () => {\n    if (window.ethereum) {\n      try {\n        const addressArray = await window.ethereum.request({\n          method: \"eth_requestAccounts\",\n        });\n        const obj = {\n          status: \"👆🏽 Write a message in the text-field above.\",\n          address: addressArray[0],\n        };\n        return obj;\n      } catch (err) {\n        return {\n          address: \"\",\n          status: \"😥 \" + err.message,\n        };\n      }\n    } else {\n      return {\n        address: \"\",\n        status: (\n          <span>\n            <p>\n              {\" \"}\n              🦊{\" \"}\n              <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n                You must install Metamask, a virtual Ethereum wallet, in your\n                browser.\n              </a>\n            </p>\n          </span>\n        ),\n      };\n    }\n  };\n\nexport const mintNFT = async(url, name, description) => {\n\n  //error handling\n  if (url.trim() == \"\" || (name.trim() == \"\" || description.trim() == \"\")) { \n      return {\n          success: false,\n          status: \"❗Please make sure all fields are completed before minting.\",\n      }\n  }\n\n  //make metadata\n  const metadata = new Object();\n  metadata.name = name;\n  metadata.image = url;\n  metadata.description = description;\n\n  //pinata pin request\n  const pinataResponse = await pinJSONToIPFS(metadata);\n  if (!pinataResponse.success) {\n      return {\n          success: false,\n          status: \"😢 Something went wrong while uploading your tokenURI.\",\n      }\n  } \n  const tokenURI = pinataResponse.pinataUrl;  \n\n  //load smart contract\n  window.contract = await new web3.eth.Contract(contractABI, contractAddress);//loadContract();\n\n  //set up your Ethereum transaction\n  const transactionParameters = {\n      to: contractAddress, // Required except during contract publications.\n      from: window.ethereum.selectedAddress, // must match user's active address.\n      'data': window.contract.methods.mintNFT(window.ethereum.selectedAddress, tokenURI).encodeABI() //make call to NFT smart contract \n  };\n\n  //sign transaction via Metamask\n  try {\n      const txHash = await window.ethereum // this is how we interact with Metamask\n          .request({\n              method: 'eth_sendTransaction',\n              params: [transactionParameters],\n          });\n      return {\n          success: true,\n          status: \"✅ Check out your transaction on Etherscan: https://sepolia.etherscan.io/tx/\" + txHash\n      }\n  } catch (error) {\n      return {\n          success: false,\n          status: \"😥 Something went wrong: \" + error.message\n      }\n  }\n};\n\n// getCurrentWalletConnected\nexport const getCurrentWalletConnected = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_accounts\",\n      });\n      if (addressArray.length > 0) {\n        return {\n          address: addressArray[0],\n          status: \"👆🏽 Write a message in the text-field above.\",\n        };\n      } else {\n        return {\n          address: \"\",\n          status: \"🦊 Connect to Metamask using the top right button.\",\n        };\n      }\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message,\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: (\n        <span>\n          <p>\n            {\" \"}\n            🦊{\" \"}\n            <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n              You must install Metamask, a virtual Ethereum wallet, in your\n              browser.\n            </a>\n          </p>\n        </span>\n      ),\n    };\n  }\n};","import { useEffect, useState } from \"react\";\nimport { connectWallet, getCurrentWalletConnected, mintNFT } from \"./utils/interact.js\";\n \nconst Minter = (props) => {\n\n  //State variables\n  const [walletAddress, setWallet] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [url, setURL] = useState(\"\");\n \n  // Wallet functionality =======>\n  useEffect(async () => { //TODO: implement\n    const {address, status} = await getCurrentWalletConnected();\n    setWallet(address)\n    setStatus(status); \n\n    addWalletListener(); \n  }, []);\n \n  const connectWalletPressed = async () => { //TODO: implement\n    const walletResponse = await connectWallet();\n    setStatus(walletResponse.status);\n    setWallet(walletResponse.address);\n  };\n\n  function addWalletListener() {\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", (accounts) => {\n        if (accounts.length > 0) {\n          setWallet(accounts[0]);\n          setStatus(\"👆🏽 Write a message in the text-field above.\");\n        } else {\n          setWallet(\"\");\n          setStatus(\"🦊 Connect to Metamask using the top right button.\");\n        }\n      });\n    } else {\n      setStatus(\n        <p>\n          {\" \"}\n          🦊{\" \"}\n          <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n            You must install Metamask, a virtual Ethereum wallet, in your\n            browser.\n          </a>\n        </p>\n      );\n    }\n  }\n  // Wallet functionality <=======\n\n  const onMintPressed = async () => {\n      const { status } = await mintNFT(url, name, description);\n      setStatus(status);\n  };\n\n  return (\n    <div className=\"Minter\">\n      <button id=\"walletButton\" onClick={connectWalletPressed}>\n        {walletAddress.length > 0 ? (\n          \"Connected: \" +\n          String(walletAddress).substring(0, 6) +\n          \"...\" +\n          String(walletAddress).substring(38)\n        ) : (\n          <span>Connect Wallet</span>\n        )}\n      </button>\n\n      <br></br>\n      <h1 id=\"title\">🧙‍♂️ John NFT Minter</h1>\n      <p>\n        Simply add your asset's link, name, and description, then press \"Mint.\"\n      </p>\n      <form>\n        <h2>🖼 Link to asset: </h2>\n        <input\n          type=\"text\"\n          placeholder=\"e.g. https://gateway.pinata.cloud/ipfs/<hash>\"\n          onChange={(event) => setURL(event.target.value)}\n        />\n        <h2>🤔 Name: </h2>\n        <input\n          type=\"text\"\n          placeholder=\"e.g. My first NFT!!!\"\n          onChange={(event) => setName(event.target.value)}\n        />\n        <h2>✍️ Description: </h2>\n        <input\n          type=\"text\"\n          placeholder=\"e.g. Even cooler than cryptokitties ;)\"\n          onChange={(event) => setDescription(event.target.value)}\n        />\n      </form>\n      <button id=\"mintButton\" onClick={onMintPressed}>\n        Mint NFT\n      </button>\n      <p id=\"status\">\n        {status}\n      </p>\n    </div>\n  );\n};\n\nexport default Minter;\n","import './App.css';\nimport Minter from './Minter'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Minter></Minter>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}