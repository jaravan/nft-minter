{"version":3,"sources":["utils/interact.js","Minter.js","App.js","reportWebVitals.js","index.js"],"names":["connectWallet","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","addressArray","obj","wrap","_context","prev","next","window","ethereum","request","method","sent","status","address","abrupt","t0","message","_jsx","children","_jsxs","target","href","stop","apply","arguments","getCurrentWalletConnected","_ref2","_callee2","_context2","length","Minter","props","_useState","useState","_useState2","_slicedToArray","walletAddress","setWallet","_useState3","_useState4","setStatus","_useState5","_useState6","setName","_useState7","_useState8","setDescription","_useState9","_useState10","setURL","useEffect","_yield$getCurrentWall","addWalletListener","connectWalletPressed","walletResponse","on","accounts","onMintPressed","_ref3","_callee3","_context3","className","id","onClick","String","substring","type","placeholder","onChange","event","value","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"8OACaA,EAAa,eAAAC,EAAAC,YAAAC,cAAAC,MAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAJ,cAAAK,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,WACrBC,OAAOC,SAAS,CAADJ,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEYC,OAAOC,SAASC,QAAQ,CACjDC,OAAQ,wBACP,KAAD,EAIA,OANIT,EAAYG,EAAAO,KAGZT,EAAM,CACVU,OAAQ,oEACRC,QAASZ,EAAa,IACvBG,EAAAU,OAAA,SACMZ,GAAG,cAAAE,EAAAC,KAAA,EAAAD,EAAAW,GAAAX,EAAA,SAAAA,EAAAU,OAAA,SAEH,CACLD,QAAS,GACTD,OAAQ,gBAAQR,EAAAW,GAAIC,UACrB,QAAAZ,EAAAE,KAAA,wBAAAF,EAAAU,OAAA,SAGI,CACLD,QAAS,GACTD,OACEK,cAAA,QAAAC,SACEC,eAAA,KAAAD,SAAA,CACG,IAAI,eACF,IACHD,cAAA,KAAGG,OAAO,SAASC,KAAI,oCAAsCH,SAAC,kFAOrE,yBAAAd,EAAAkB,OAAA,GAAAtB,EAAA,kBAEJ,kBAlCuB,OAAAJ,EAAA2B,MAAA,KAAAC,UAAA,KAqCbC,EAAyB,eAAAC,EAAA7B,YAAAC,cAAAC,MAAG,SAAA4B,IAAA,IAAA1B,EAAA,OAAAH,cAAAK,MAAA,SAAAyB,GAAA,cAAAA,EAAAvB,KAAAuB,EAAAtB,MAAA,WACnCC,OAAOC,SAAS,CAADoB,EAAAtB,KAAA,gBAAAsB,EAAAvB,KAAA,EAAAuB,EAAAtB,KAAA,EAEYC,OAAOC,SAASC,QAAQ,CACjDC,OAAQ,iBACP,KAAD,EAFgB,MAAZT,EAAY2B,EAAAjB,MAGDkB,OAAS,GAAC,CAAAD,EAAAtB,KAAA,eAAAsB,EAAAd,OAAA,SAClB,CACLD,QAASZ,EAAa,GACtBW,OAAQ,sEACT,cAAAgB,EAAAd,OAAA,SAEM,CACLD,QAAS,GACTD,OAAQ,iEACT,QAAAgB,EAAAtB,KAAA,wBAAAsB,EAAAvB,KAAA,GAAAuB,EAAAb,GAAAa,EAAA,SAAAA,EAAAd,OAAA,SAGI,CACLD,QAAS,GACTD,OAAQ,gBAAQgB,EAAAb,GAAIC,UACrB,QAAAY,EAAAtB,KAAA,wBAAAsB,EAAAd,OAAA,SAGI,CACLD,QAAS,GACTD,OACEK,cAAA,QAAAC,SACEC,eAAA,KAAAD,SAAA,CACG,IAAI,eACF,IACHD,cAAA,KAAGG,OAAO,SAASC,KAAI,oCAAsCH,SAAC,kFAOrE,yBAAAU,EAAAN,OAAA,GAAAK,EAAA,mBAEJ,kBAxCqC,OAAAD,EAAAH,MAAA,KAAAC,UAAA,KCsEvBM,EAtGA,SAACC,GAGd,IAAAC,EAAmCC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAAxCI,EAAaF,EAAA,GAAEG,EAASH,EAAA,GAC/BI,EAA4BL,mBAAS,IAAGM,EAAAJ,YAAAG,EAAA,GAAjC1B,EAAM2B,EAAA,GAAEC,EAASD,EAAA,GACxBE,EAAwBR,mBAAS,IAAGS,EAAAP,YAAAM,EAAA,GAAvBE,GAAFD,EAAA,GAASA,EAAA,IACpBE,EAAsCX,mBAAS,IAAGY,EAAAV,YAAAS,EAAA,GAA9BE,GAAFD,EAAA,GAAgBA,EAAA,IAClCE,EAAsBd,mBAAS,IAAGe,EAAAb,YAAAY,EAAA,GAAtBE,GAAFD,EAAA,GAAQA,EAAA,IAGlBE,oBAASrD,YAAAC,cAAAC,MAAC,SAAAC,IAAA,IAAAmD,EAAAtC,EAAAD,EAAA,OAAAd,cAAAK,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACwBmB,IAA4B,KAAD,EAAA0B,EAAA/C,EAAAO,KAApDE,EAAOsC,EAAPtC,QAASD,EAAMuC,EAANvC,OAChByB,EAAUxB,GACV2B,EAAU5B,GAEVwC,IAAoB,wBAAAhD,EAAAkB,OAAA,GAAAtB,EAAA,KACnB,IAEH,IAAMqD,EAAoB,eAAA3B,EAAA7B,YAAAC,cAAAC,MAAG,SAAA4B,IAAA,IAAA2B,EAAA,OAAAxD,cAAAK,MAAA,SAAAyB,GAAA,cAAAA,EAAAvB,KAAAuB,EAAAtB,MAAA,cAAAsB,EAAAtB,KAAA,EACEX,IAAgB,KAAD,EAAtC2D,EAAc1B,EAAAjB,KACpB6B,EAAUc,EAAe1C,QACzByB,EAAUiB,EAAezC,SAAS,wBAAAe,EAAAN,OAAA,GAAAK,EAAA,KACnC,kBAJyB,OAAAD,EAAAH,MAAA,KAAAC,UAAA,KAM1B,SAAS4B,IACH7C,OAAOC,SACTD,OAAOC,SAAS+C,GAAG,mBAAmB,SAACC,GACjCA,EAAS3B,OAAS,GACpBQ,EAAUmB,EAAS,IACnBhB,EAAU,uEAEVH,EAAU,IACVG,EAAU,gEAEd,IAEAA,EACErB,eAAA,KAAAD,SAAA,CACG,IAAI,eACF,IACHD,cAAA,KAAGG,OAAO,SAASC,KAAI,oCAAsCH,SAAC,8EAOtE,CAGA,IAAMuC,EAAa,eAAAC,EAAA7D,YAAAC,cAAAC,MAAG,SAAA4D,IAAA,OAAA7D,cAAAK,MAAA,SAAAyD,GAAA,cAAAA,EAAAvD,KAAAuD,EAAAtD,MAAA,wBAAAsD,EAAAtC,OAAA,GAAAqC,EAAA,KAErB,kBAFkB,OAAAD,EAAAnC,MAAA,KAAAC,UAAA,KAInB,OACEL,eAAA,OAAK0C,UAAU,SAAQ3C,SAAA,CACrBD,cAAA,UAAQ6C,GAAG,eAAeC,QAASV,EAAqBnC,SACrDkB,EAAcP,OAAS,EACtB,cACAmC,OAAO5B,GAAe6B,UAAU,EAAG,GACnC,MACAD,OAAO5B,GAAe6B,UAAU,IAEhChD,cAAA,QAAAC,SAAM,qBAIVD,cAAA,SACAA,cAAA,MAAI6C,GAAG,QAAO5C,SAAC,mDACfD,cAAA,KAAAC,SAAG,6EAGHC,eAAA,QAAAD,SAAA,CACED,cAAA,MAAAC,SAAI,iCACJD,cAAA,SACEiD,KAAK,OACLC,YAAY,gDACZC,SAAU,SAACC,GAAK,OAAKpB,EAAOoB,EAAMjD,OAAOkD,MAAM,IAEjDrD,cAAA,MAAAC,SAAI,wBACJD,cAAA,SACEiD,KAAK,OACLC,YAAY,uBACZC,SAAU,SAACC,GAAK,OAAK1B,EAAQ0B,EAAMjD,OAAOkD,MAAM,IAElDrD,cAAA,MAAAC,SAAI,+BACJD,cAAA,SACEiD,KAAK,OACLC,YAAY,yCACZC,SAAU,SAACC,GAAK,OAAKvB,EAAeuB,EAAMjD,OAAOkD,MAAM,OAG3DrD,cAAA,UAAQ6C,GAAG,aAAaC,QAASN,EAAcvC,SAAC,aAGhDD,cAAA,KAAG6C,GAAG,SAAQ5C,SACXN,MAIT,EC/Fe2D,MARf,WACE,OACEtD,cAAA,OAAK4C,UAAU,MAAK3C,SAClBD,cAACa,EAAM,KAGb,ECGe0C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,SAAA/E,GAAkD,IAA/CgF,EAAMhF,EAANgF,OAAQC,EAAMjF,EAANiF,OAAQC,EAAMlF,EAANkF,OAAQC,EAAMnF,EAANmF,OAAQC,EAAOpF,EAAPoF,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,EACV,GAEJ,ECJAQ,IAASC,OACPjE,cAACkE,IAAMC,WAAU,CAAAlE,SACfD,cAACsD,EAAG,MAENc,SAASC,eAAe,SAM1Bd,G","file":"static/js/main.d651da17.chunk.js","sourcesContent":["// connectWallet\nexport const connectWallet = async () => {\n    if (window.ethereum) {\n      try {\n        const addressArray = await window.ethereum.request({\n          method: \"eth_requestAccounts\",\n        });\n        const obj = {\n          status: \"👆🏽 Write a message in the text-field above.\",\n          address: addressArray[0],\n        };\n        return obj;\n      } catch (err) {\n        return {\n          address: \"\",\n          status: \"😥 \" + err.message,\n        };\n      }\n    } else {\n      return {\n        address: \"\",\n        status: (\n          <span>\n            <p>\n              {\" \"}\n              🦊{\" \"}\n              <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n                You must install Metamask, a virtual Ethereum wallet, in your\n                browser.\n              </a>\n            </p>\n          </span>\n        ),\n      };\n    }\n  };\n\n// getCurrentWalletConnected\nexport const getCurrentWalletConnected = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_accounts\",\n      });\n      if (addressArray.length > 0) {\n        return {\n          address: addressArray[0],\n          status: \"👆🏽 Write a message in the text-field above.\",\n        };\n      } else {\n        return {\n          address: \"\",\n          status: \"🦊 Connect to Metamask using the top right button.\",\n        };\n      }\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message,\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: (\n        <span>\n          <p>\n            {\" \"}\n            🦊{\" \"}\n            <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n              You must install Metamask, a virtual Ethereum wallet, in your\n              browser.\n            </a>\n          </p>\n        </span>\n      ),\n    };\n  }\n};","import { useEffect, useState } from \"react\";\nimport {\n  connectWallet,\n  getCurrentWalletConnected //import here\n} from \"./utils/interact.js\";\n\nconst Minter = (props) => {\n\n  //State variables\n  const [walletAddress, setWallet] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [url, setURL] = useState(\"\");\n \n  // Wallet functionality =======>\n  useEffect(async () => { //TODO: implement\n    const {address, status} = await getCurrentWalletConnected();\n    setWallet(address)\n    setStatus(status); \n\n    addWalletListener(); \n  }, []);\n\n  const connectWalletPressed = async () => { //TODO: implement\n    const walletResponse = await connectWallet();\n    setStatus(walletResponse.status);\n    setWallet(walletResponse.address);\n  };\n\n  function addWalletListener() {\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", (accounts) => {\n        if (accounts.length > 0) {\n          setWallet(accounts[0]);\n          setStatus(\"👆🏽 Write a message in the text-field above.\");\n        } else {\n          setWallet(\"\");\n          setStatus(\"🦊 Connect to Metamask using the top right button.\");\n        }\n      });\n    } else {\n      setStatus(\n        <p>\n          {\" \"}\n          🦊{\" \"}\n          <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n            You must install Metamask, a virtual Ethereum wallet, in your\n            browser.\n          </a>\n        </p>\n      );\n    }\n  }\n  // Wallet functionality <=======\n\n  const onMintPressed = async () => { //TODO: implement\n    \n  };\n\n  return (\n    <div className=\"Minter\">\n      <button id=\"walletButton\" onClick={connectWalletPressed}>\n        {walletAddress.length > 0 ? (\n          \"Connected: \" +\n          String(walletAddress).substring(0, 6) +\n          \"...\" +\n          String(walletAddress).substring(38)\n        ) : (\n          <span>Connect Wallet</span>\n        )}\n      </button>\n\n      <br></br>\n      <h1 id=\"title\">🧙‍♂️ John NFT Minter</h1>\n      <p>\n        Simply add your asset's link, name, and description, then press \"Mint.\"\n      </p>\n      <form>\n        <h2>🖼 Link to asset: </h2>\n        <input\n          type=\"text\"\n          placeholder=\"e.g. https://gateway.pinata.cloud/ipfs/<hash>\"\n          onChange={(event) => setURL(event.target.value)}\n        />\n        <h2>🤔 Name: </h2>\n        <input\n          type=\"text\"\n          placeholder=\"e.g. My first NFT!!!\"\n          onChange={(event) => setName(event.target.value)}\n        />\n        <h2>✍️ Description: </h2>\n        <input\n          type=\"text\"\n          placeholder=\"e.g. Even cooler than cryptokitties ;)\"\n          onChange={(event) => setDescription(event.target.value)}\n        />\n      </form>\n      <button id=\"mintButton\" onClick={onMintPressed}>\n        Mint NFT\n      </button>\n      <p id=\"status\">\n        {status}\n      </p>\n    </div>\n  );\n};\n\nexport default Minter;\n","import './App.css';\nimport Minter from './Minter'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Minter></Minter>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}